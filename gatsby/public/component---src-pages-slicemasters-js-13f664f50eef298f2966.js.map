{"version":3,"sources":["webpack:///./src/components/Pagination.js","webpack:///./src/pages/slicemasters.js"],"names":["PaginationStyles","styled","div","Pagination","pageSize","totalCount","currentPage","base","skip","totalPages","Math","ceil","prevPage","nextPage","hasNextPage","hasPrevPage","disabled","to","Array","from","length","map","_","i","className","key","SliceMasterGrid","SliceMasterStyles","SliceMasters","data","pageContext","slicemasters","nodes","SEO","title","parseInt","process","person","id","slug","current","name","fluid","image","asset","description","query"],"mappings":"sPAIMA,EAAmBC,IAAOC,IAAV,mFAAGD,CAAH,gZAgCP,SAASE,EAAT,GAMX,IALFC,EAKC,EALDA,SACAC,EAIC,EAJDA,WACAC,EAGC,EAHDA,YAEAC,GACC,EAFDC,KAEC,EADDD,MAEME,EAAaC,KAAKC,KAAKN,EAAaD,GACpCQ,EAAWN,EAAc,EACzBO,EAAWP,EAAc,EACzBQ,EAAcD,GAAYJ,EAC1BM,EAAcH,GAAY,EAEhC,OACE,kBAACZ,EAAD,KACE,kBAAC,IAAD,CAAMgB,UAAWD,EAAaE,GAAOV,EAAL,IAAaK,GAA7C,UAGCM,MAAMC,KAAK,CAAEC,OAAQX,IAAcY,KAAI,SAACC,EAAGC,GAAJ,OACtC,kBAAC,IAAD,CACEC,UAA2B,IAAhBlB,GAA2B,IAANiB,EAAU,UAAY,GACtDN,GAAOV,EAAL,KAAagB,EAAI,EAAIA,EAAI,EAAI,IAC/BE,IAAG,OAASF,GAEXA,EAAI,MAGT,kBAAC,IAAD,CAAMP,UAAWF,EAAaG,GAAOV,EAAL,IAAaM,GAA7C,W,gBCxDAa,EAAkBzB,IAAOC,IAAV,oFAAGD,CAAH,2FAMf0B,EAAoB1B,IAAOC,IAAV,sFAAGD,CAAH,qUA4BR,SAAS2B,EAAT,GAA8C,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,YACrCC,EAAeF,EAAKE,aAAaC,MACvC,OACE,oCACE,kBAACC,EAAA,EAAD,CAAKC,MAAK,wBAAyBJ,EAAYxB,aAAe,KAC9D,kBAACH,EAAD,CACEC,SAAU+B,SAASC,KACnB/B,WAAYwB,EAAKE,aAAa1B,WAC9BC,YAAawB,EAAYxB,aAAe,EACxCE,KAAMsB,EAAYtB,KAClBD,KAAK,kBAEP,kBAACmB,EAAD,KACGK,EAAaV,KAAI,SAACgB,GAAD,OAChB,kBAACV,EAAD,CAAmBF,IAAKY,EAAOC,IAC7B,kBAAC,IAAD,CAAMrB,GAAE,gBAAkBoB,EAAOE,KAAKC,SACpC,4BACE,0BAAMhB,UAAU,QAAQa,EAAOI,QAGnC,kBAAC,IAAD,CAAKC,MAAOL,EAAOM,MAAMC,MAAMF,QAC/B,uBAAGlB,UAAU,eAAea,EAAOQ,mBAQxC,IAAMC,EAAK","file":"component---src-pages-slicemasters-js-13f664f50eef298f2966.js","sourcesContent":["import React from 'react';\nimport { Link } from 'gatsby';\nimport styled from 'styled-components';\n\nconst PaginationStyles = styled.div`\n  display: flex;\n  align-content: center;\n  align-items: center;\n  justify-items: center;\n  border: 1px solid var(--grey);\n  margin: 2rem 0;\n  border-radius: 5px;\n  text-align: center;\n  & > * {\n    padding: 1rem;\n    flex: 1;\n    border-right: 1px solid var(--grey);\n    text-decoration: none;\n    &[aria-current],\n    &.current {\n      color: var(--red);\n    }\n    /* disable button */\n    &[disabled] {\n      pointer-events: none;\n      color: var(--grey);\n    }\n  }\n  @media (max-width: 800px) {\n    .word {\n      display: none;\n    }\n    font-size: 1.4rem;\n  }\n`;\n\nexport default function Pagination({\n  pageSize,\n  totalCount,\n  currentPage,\n  skip,\n  base,\n}) {\n  const totalPages = Math.ceil(totalCount / pageSize);\n  const prevPage = currentPage - 1;\n  const nextPage = currentPage + 1;\n  const hasNextPage = nextPage <= totalPages;\n  const hasPrevPage = prevPage >= 1;\n\n  return (\n    <PaginationStyles>\n      <Link disabled={!hasPrevPage} to={`${base}/${prevPage}`}>\n        &#8592; Prev\n      </Link>\n      {Array.from({ length: totalPages }).map((_, i) => (\n        <Link\n          className={currentPage === 1 && i === 0 ? 'current' : ''}\n          to={`${base}/${i > 0 ? i + 1 : ''}`}\n          key={`page${i}`}\n        >\n          {i + 1}\n        </Link>\n      ))}\n      <Link disabled={!hasNextPage} to={`${base}/${nextPage}`}>\n        Next &#8594;\n      </Link>\n    </PaginationStyles>\n  );\n}\n","import { graphql, Link } from 'gatsby';\nimport React from 'react';\nimport Img from 'gatsby-image';\nimport styled from 'styled-components';\nimport Pagination from '../components/Pagination';\nimport SEO from '../components/SEO';\n\nconst SliceMasterGrid = styled.div`\n  display: grid;\n  grid-gap: 2rem;\n  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\n`;\n\nconst SliceMasterStyles = styled.div`\n  a {\n    text-decoration: none;\n  }\n  /* image class wrapper added by gatsby */\n  .gatsby-image-wrapper {\n    height: 400px;\n  }\n  h2 {\n    transform: rotate(-2deg);\n    text-align: center;\n    font-size: 4rem;\n    margin-bottom: -2rem;\n    position: relative;\n    z-index: 2;\n  }\n  .description {\n    background: var(--yellow);\n    padding: 1rem;\n    margin: 2rem;\n    margin-top: -6rem;\n    z-index: 2;\n    position: relative;\n    transform: rotate(1deg);\n    text-align: center;\n  }\n`;\n\nexport default function SliceMasters({ data, pageContext }) {\n  const slicemasters = data.slicemasters.nodes;\n  return (\n    <>\n      <SEO title={`Slicemasters - Page ${pageContext.currentPage || 1}`} />\n      <Pagination\n        pageSize={parseInt(process.env.GATSBY_PAGE_SIZE)}\n        totalCount={data.slicemasters.totalCount}\n        currentPage={pageContext.currentPage || 1}\n        skip={pageContext.skip}\n        base=\"/slicemasters\"\n      />\n      <SliceMasterGrid>\n        {slicemasters.map((person) => (\n          <SliceMasterStyles key={person.id}>\n            <Link to={`/slicemaster/${person.slug.current}`}>\n              <h2>\n                <span className=\"mark\">{person.name}</span>\n              </h2>\n            </Link>\n            <Img fluid={person.image.asset.fluid} />\n            <p className=\"description\">{person.description}</p>\n          </SliceMasterStyles>\n        ))}\n      </SliceMasterGrid>\n    </>\n  );\n}\n\nexport const query = graphql`\n  query($skip: Int = 0, $pageSize: Int = 2) {\n    slicemasters: allSanityPerson(limit: $pageSize, skip: $skip) {\n      totalCount\n      nodes {\n        name\n        id\n        slug {\n          current\n        }\n        description\n        image {\n          asset {\n            fluid(maxWidth: 410) {\n              ...GatsbySanityImageFluid\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}